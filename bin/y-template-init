#!/usr/bin/env node
'use strict';

const fs = require('fs');
const path = require('path');
const os = require('os');

const download = require('download-git-repo');
const program = require('commander');
const ora = require('ora');
const home = require('user-home');
const tildify = require('tildify');
const chalk = require('chalk');
const inquirer = require('inquirer');
const rimraf = require('rimraf');

const localPath = require('vue-cli/lib/local-path');
const generate = require('vue-cli/lib/generate.js');

const logger = require('../lib/logger.js');

const exists = fs.existsSync;
const rm = rimraf.sync;
const isLocalPath = localPath.isLocalPath
const getTemplatePath = localPath.getTemplatePath

// Usage
program
  .usage('<template-name> [project-name]')
  .option('-c, --clone', 'use git clone')
  .option('--offline', 'use cached template');

// Help
program.on('--help', function () {
  console.log('  Examples:')
  console.log();
  console.log(chalk.gray('    # create a new project straight from a github template'));
  console.log('    $ y-template init username/repo my-project');
  console.log();
  console.log(chalk.gray('    # create a new project straight from a url'));
  console.log('    $ y-template init direct:https://my.gitlab.com/username/repo#my-branch my-project  --clone');
  console.log();
});

// Help
program.parse(process.argv);
if (!program.args.length) {
  program.help();
}

const template = program.args[0];
const rawName = program.args[1];

const to = path.resolve(rawName || '.');
const inPlace = !rawName || rawName === '.';
const name = inPlace ? path.relative('../', process.cwd()) : rawName;
const clone = program.clone || false

const tmp = path.join(home, '.y-template-templates', template.replace(/\//g, '-'));
if (program.offline) {
  console.log(`> Use cached template at ${chalk.yellow(tildify(tmp))}`);
  template = tmp;
}

if (exists(to)) {
  inquirer.prompt([{
    type: 'confirm',
    name: 'ok',
    message: inPlace
      ? 'Generate project in current directory?'
      : 'Target directory exists. Continue?',
  }], function (answers) {
    if (answers.ok) {
      run();
    }
  });
} else {
  run();
}

function run() {
  if (isLocalPath(template)) {
    const templatePath = getTemplatePath(template);
    if (exists(templatePath)) {
      generate(name, templatePath, to, function (err) {
        if (err) {
          return logger.fatal(err);
        }
        console.log();
        logger.success('Generated "%s".', name);
      });
    } else {
      logger.fatal('Local template "%s" not found.', template);
    }
  } else {
    downloadAndGenerate(template);
  }
}

function downloadAndGenerate (template) {
  const spinner = ora('downloading template');
  spinner.start();

  // Remove if local template exists
  if (exists(tmp)) {
    rm(tmp);
  }

  download(template, tmp, { clone: clone }, function (err) {
    spinner.stop();
    if (err) {
      return logger.fatal('Failed to download repo ' + template + ': ' + err.message.trim());
    }
    generate(name, tmp, to, function (err) {
      if (err) {
        return logger.fatal(err);
      }
      console.log();
      logger.success('Generated "%s".', name);
    });
  });
}
